import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Header } from "@/components/Header";
import { ArrowLeft, CreditCard, Download, CheckCircle, AlertTriangle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useNavigate } from "react-router-dom";
import { Medicine } from "@/components/ProductCard";

interface UnavailableMedicine {
  id: string;
  name: string;
  dosage: string;
  frequency: string;
  duration: string;
  instructions: string;
}

export const PrescriptionCheckout = () => {
  const [cartItems, setCartItems] = useState<Medicine[]>([]);
  const [unavailableItems, setUnavailableItems] = useState<UnavailableMedicine[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [orderComplete, setOrderComplete] = useState(false);
  const [orderId, setOrderId] = useState<string>("");
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    const stored = localStorage.getItem('prescriptionCart');
    const unavailable = localStorage.getItem('unavailableMedicines');
    
    if (stored) {
      setCartItems(JSON.parse(stored));
    }
    
    if (unavailable) {
      setUnavailableItems(JSON.parse(unavailable));
    }
    
    // If no data at all, redirect to prescription
    if (!stored && !unavailable) {
      navigate('/prescription');
    }
  }, [navigate]);

  const subtotal = cartItems.reduce((sum, item) => sum + item.price, 0);
  const tax = subtotal * 0.1; // 10% tax
  const total = subtotal + tax;

  const processPayment = async () => {
    setIsProcessing(true);
    
    // Simulate payment processing
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const newOrderId = `ORD-${Date.now()}`;
    setOrderId(newOrderId);
    setOrderComplete(true);
    setIsProcessing(false);
    
    toast({
      title: "Payment Successful",
      description: `Your order ${newOrderId} has been processed successfully`,
    });
  };

  const downloadInvoice = () => {
    // Create a simple text invoice
    const invoiceContent = `
MEDICARE PHARMACY - INVOICE
============================

Order ID: ${orderId}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

ITEMS:
${cartItems.map(item => `${item.name} - $${item.price.toFixed(2)}`).join('\n')}

SUMMARY:
Subtotal: $${subtotal.toFixed(2)}
Tax (10%): $${tax.toFixed(2)}
Total: $${total.toFixed(2)}

Payment Method: Credit Card
Status: Paid

Thank you for your purchase!
    `;

    const blob = new Blob([invoiceContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `invoice-${orderId}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Invoice Downloaded",
      description: "Your invoice has been downloaded successfully",
    });
  };

  const downloadPrescriptionAnalysis = () => {
    const extractedMedicines = localStorage.getItem('extractedMedicines');
    if (extractedMedicines) {
      const analysis = JSON.parse(extractedMedicines);
      const analysisContent = `
PRESCRIPTION ANALYSIS REPORT
============================

Date: ${new Date().toLocaleDateString()}
Analysis Method: AI-Powered Text Extraction

EXTRACTED MEDICINES:
${analysis.map((med: any) => `
Medicine: ${med.name}
Dosage: ${med.dosage}
Frequency: ${med.frequency}
Duration: ${med.duration}
Instructions: ${med.instructions}
`).join('\n')}

Note: This analysis was generated by AI and is for informational purposes only.
Always consult with a healthcare professional for medical advice.
      `;

      const blob = new Blob([analysisContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'prescription-analysis.txt';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Analysis Downloaded",
        description: "Your prescription analysis has been downloaded",
      });
    }
  };

  if (orderComplete) {
    return (
      <div className="min-h-screen bg-background">
        <Header />
        
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-2xl mx-auto space-y-8">
            <Card className="text-center shadow-medical border-success/20">
              <CardContent className="pt-8 pb-8 space-y-6">
                <div className="space-y-4">
                  <CheckCircle className="w-16 h-16 text-success mx-auto" />
                  <div>
                    <h1 className="text-3xl font-bold text-foreground">Order Complete!</h1>
                    <p className="text-muted-foreground">Your prescription order has been processed successfully</p>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="p-4 bg-success/10 rounded-lg border border-success/20">
                    <div className="space-y-2">
                      <p className="text-sm text-muted-foreground">Order ID</p>
                      <p className="text-lg font-bold text-foreground">{orderId}</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <Button 
                      onClick={downloadInvoice}
                      variant="outline"
                      className="flex items-center space-x-2"
                    >
                      <Download className="w-4 h-4" />
                      <span>Download Invoice</span>
                    </Button>
                    
                    <Button 
                      onClick={downloadPrescriptionAnalysis}
                      variant="outline"
                      className="flex items-center space-x-2"
                    >
                      <Download className="w-4 h-4" />
                      <span>Download Analysis</span>
                    </Button>
                  </div>

                  <Button 
                    onClick={() => navigate('/')}
                    variant="medical"
                    className="w-full"
                  >
                    Continue Shopping
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto space-y-8">
          {/* Header */}
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              onClick={() => navigate('/medicine-matching')}
              className="flex items-center space-x-2"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Matching</span>
            </Button>
            
            <div>
              <h1 className="text-3xl font-bold gradient-primary bg-clip-text text-transparent">
                Prescription Checkout
              </h1>
              <p className="text-muted-foreground">
                Review and complete your prescription order
              </p>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Order Items */}
            <div className="lg:col-span-2 space-y-6">
              {/* Available Medicines */}
              {cartItems.length > 0 && (
                <Card className="shadow-card border-primary/10">
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <CheckCircle className="w-5 h-5 text-success" />
                      <span>Available Medicines</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {cartItems.map((item) => (
                      <div key={item.id} className="p-4 bg-card/50 rounded-lg border border-success/20">
                        <div className="flex items-center space-x-4">
                          <img
                            src={item.image}
                            alt={item.name}
                            className="w-16 h-16 object-cover rounded-lg"
                          />
                          <div className="flex-1 space-y-2">
                            <div className="flex items-center justify-between">
                              <h4 className="font-medium text-foreground">{item.name}</h4>
                              <p className="font-semibold text-foreground">${item.price.toFixed(2)}</p>
                            </div>
                            <p className="text-sm text-muted-foreground">{item.dosage}</p>
                            <p className="text-sm text-foreground">{item.description}</p>
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline" className="border-success text-success">
                                {item.category}
                              </Badge>
                              <Badge variant="outline" className="border-success text-success">
                                In Stock: {item.stock}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              )}

              {/* Unavailable Medicines */}
              {unavailableItems.length > 0 && (
                <Card className="shadow-card border-warning/20">
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <AlertTriangle className="w-5 h-5 text-warning" />
                      <span>Unavailable Medicines</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {unavailableItems.map((item) => (
                      <div key={item.id} className="p-4 bg-warning/5 rounded-lg border border-warning/20">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium text-foreground">{item.name}</h4>
                            <Badge variant="outline" className="border-warning text-warning">
                              Not Available
                            </Badge>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            <span className="font-medium">Prescribed:</span> {item.dosage} • {item.frequency} • {item.duration}
                          </p>
                          <p className="text-sm text-muted-foreground">
                            <span className="font-medium">Instructions:</span> {item.instructions}
                          </p>
                          <p className="text-xs text-warning">
                            Please consult with a pharmacist for alternative medicines.
                          </p>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              )}
            </div>

            {/* Order Summary */}
            <div className="space-y-6">
              <Card className="shadow-card border-primary/10">
                <CardHeader>
                  <CardTitle>Order Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">Subtotal</span>
                      <span className="text-foreground">${subtotal.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">Tax (10%)</span>
                      <span className="text-foreground">${tax.toFixed(2)}</span>
                    </div>
                    <Separator />
                    <div className="flex justify-between font-semibold">
                      <span className="text-foreground">Total</span>
                      <span className="text-primary">${total.toFixed(2)}</span>
                    </div>
                  </div>

                  <Button
                    onClick={processPayment}
                    disabled={isProcessing || cartItems.length === 0}
                    className="w-full"
                    variant="medical"
                  >
                    {cartItems.length === 0 ? (
                      "No Items to Purchase"
                    ) : isProcessing ? (
                      "Processing Payment..."
                    ) : (
                      <>
                        <CreditCard className="w-4 h-4 mr-2" />
                        Pay ${total.toFixed(2)}
                      </>
                    )}
                  </Button>

                  {cartItems.length === 0 && (
                    <p className="text-xs text-center text-muted-foreground">
                      All prescribed medicines are currently unavailable. Please consult with a pharmacist.
                    </p>
                  )}

                  <div className="text-xs text-muted-foreground text-center">
                    Secure payment processing. Your card information is encrypted and protected.
                  </div>
                </CardContent>
              </Card>

              <Card className="shadow-card border-primary/10">
                <CardHeader>
                  <CardTitle className="text-lg">Prescription Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="text-sm space-y-1">
                    <p className="text-muted-foreground">Order Type:</p>
                    <p className="text-foreground font-medium">Prescription Fulfillment</p>
                  </div>
                  <div className="text-sm space-y-1">
                    <p className="text-muted-foreground">Processing Time:</p>
                    <p className="text-foreground font-medium">2-3 business days</p>
                  </div>
                  <div className="text-sm space-y-1">
                    <p className="text-muted-foreground">Delivery:</p>
                    <p className="text-foreground font-medium">Standard shipping included</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {cartItems.length === 0 && unavailableItems.length === 0 && (
            <div className="text-center py-12 space-y-4">
              <h3 className="text-xl font-semibold text-foreground">No Prescription Data</h3>
              <p className="text-muted-foreground">
                Please upload and analyze a prescription first.
              </p>
              <Button 
                onClick={() => navigate('/prescription')} 
                variant="medical"
              >
                Upload Prescription
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};